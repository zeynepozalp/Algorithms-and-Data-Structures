//You are given two non-empty linked lists representing two non-negative integers.
//The digits are stored in reverse order and each of their nodes contain a single digit.
//Add the two numbers and return it as a linked list.

ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int c=0;
        ListNode* res;
        if(l1->val+l2->val<10){
            res=new ListNode(l1->val+l2->val);
            l1=l1->next;
            l2=l2->next;
        }
        else{
            res=new ListNode((l1->val+l2->val)%10);
            c=1;
            l1=l1->next;
            l2=l2->next;
            if(l1==NULL && l2==NULL){
                res->next=new ListNode(1);
                return res;
            }
        }
        ListNode* node=res;
        while(l1!=NULL && l2!=NULL){
            node->next=new ListNode((l1->val+l2->val+c)%10);
            if((l1->val+l2->val+c)>9){
                c=1;
            }
            else{
                c=0;
            }
            l1=l1->next;
            l2=l2->next;
            node=node->next;
        }
        while(l1!=NULL){
            if(c==1){
                if((l1->val)%10+1<10){
                    node->next=new ListNode(l1->val+1);
                    c=0;
                }
                else{
                    node->next=new ListNode((l1->val+1)%10);
                    c=1;
                }
                    
            }
            else{
                node->next=l1;
                c=0;
            }
            l1=l1->next;
            node=node->next;
        }
        while(l2!=NULL){
            if(c==1){
                if((l2->val)%10+1<10){
                    cout << "3";
                    node->next=new ListNode(l2->val+1);
                    c=0;
                }
                else{
                    node->next=new ListNode((l2->val+1)%10);
                    c=1;
                }
            }
            else{
                node->next=l2;
                c=0;
            }
            node=node->next;
            l2=l2->next;
        }
        if(c==1){
            node->next=new ListNode(1);
        }
        return res;
    }